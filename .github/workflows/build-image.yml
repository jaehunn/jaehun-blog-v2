name: build

on:
  push:
    branches: [main]

env:
  NODE_VERSION: "22.x"
  # secrets
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # vars
  AWS_REGION: ${{ vars.AWS_REGION }}

  # s3
  AWS_S3_BUCKET_NAME: ${{ vars.AWS_S3_BUCKET_NAME }}
  CACHE_CONTROL_MAX_AGE: ${{ vars.CACHE_CONTROL_MAX_AGE }}

  # ecr
  AWS_ECR_NAME: ${{ vars.AWS_ECR_NAME }}

  # ecs
  AWS_ECS_CLUSTER_NAME: ${{ vars.AWS_ECS_CLUSTER_NAME }}
  AWS_ECS_SERVICE_NAME: ${{ vars.AWS_ECS_SERVICE_NAME }}
  AWS_ECS_TASK_DEFINITION_NAME: ${{ vars.AWS_ECS_TASK_DEFINITION_NAME }}
  AWS_ECS_CONTAINER_NAME: ${{ vars.AWS_ECS_CONTAINER_NAME }}

jobs:
  build-nextjs:
    runs-on: ubuntu-latest

    steps:
      - name: Git clone
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build result
        uses: actions/upload-artifact@v4
        with:
          name: next-built-${{ github.sha }}
          retention-days: 5
          path: |
            .next/standalone/*
            .next/static/*
            public/*

  upload-s3:
    needs: build-nextjs
    runs-on: ubuntu-latest

    steps:
      - name: Git clone
        uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Download build result
        uses: actions/download-artifact@v4
        with:
          name: next-built-${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync static files with S3
        env:
          MAX_AGE: ${{ env.CACHE_CONTROL_MAX_AGE }}
        run: aws s3 sync .next/static s3://${{ env.AWS_S3_BUCKET_NAME }}/${{ steps.package-version.outputs.current-version }}/_next/static --cache-control max-age=$MAX_AGE,public,immutable

  build-docker:
    needs: build-nextjs
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
      - name: Git clone
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Download build result
        uses: actions/download-artifact@v4
        with:
          name: next-built-${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push docker image to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_ECR_NAME }}
          IMAGE_TAG: ${{ steps.package-version.outputs.current-version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Export image
        id: image
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_NAME }}:${{ steps.package-version.outputs.current-version }}" >> $GITHUB_OUTPUT

  deploy-ecs:
    needs: build-docker
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.AWS_ECS_TASK_DEFINITION_NAME }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME }}
          image: ${{ needs.build-docker.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
